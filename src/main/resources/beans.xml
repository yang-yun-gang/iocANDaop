<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- bean就是一个java对象，由spring创建和管理 -->
    <!-- 有参构造注入 -->
    <bean id="hello" name="he llo" class="com.example.spring.ioc.Hello">
        <constructor-arg name="name" value="spring"/>
    </bean>
    
    <!-- set注入 -->
    <bean id="address" class="com.example.spring.ioc.Address">
        <property name="address" value="sichuan"/>
    </bean>
    <bean id="student" class="com.example.spring.ioc.Student">
        <property name="name" value="yang"/>
        <property name="address" ref="address"/>
        <property name="books">
            <array>
                <value>数据结构</value>
                <value>操作系统</value>
                <value>计算机网络</value>
            </array>
        </property>
        <property name="hobbys">
            <list>
                <value>piano</value>
                <value>running</value>
            </list>
        </property>
        <property name="card">
            <map>
                <entry key="中国工商" value="156467865"/>
                <entry key="中国银行" value="468765468"/>
            </map>
        </property>
        <property name="games">
            <set>
                <value>overwatch</value>
                <value>lol</value>
            </set>
        </property>
        <property name="wife"><null/></property>
    </bean>

    <!-- p命名注入 -->
    <!--<bean name="user" class="com.example.spring.ioc.User" p:name="yang" p:age="20"/>-->

    <!-- c命名注入 -->
    <bean name="user" class="com.example.spring.ioc.User" c:name="huang" c:age="18"/>

    <!--<alias name="hello" alias="hell"/>-->

    <bean id="dog1" class="com.example.spring.ioc.Dog"/>
    <bean id="dog2" class="com.example.spring.ioc.Dog"/>
    <bean id="cat2" class="com.example.spring.ioc.Cat"/>
    <bean id="cat" class="com.example.spring.ioc.Cat"/>

    <!--<bean id="master" class="com.example.spring.ioc.Master">
        <property name="dog" ref="dog"/>
        <property name="cat" ref="cat"/>
        <property name="str" value="yang"/>
    </bean>-->

    <!-- 自动装配 byName与byType -->
    <!--<bean id="master" class="com.example.spring.ioc.Master" autowire="byType">
        <property name="str" value="yang"/>
    </bean>-->

    <context:annotation-config/>

    <!-- 注解自动装配 -->
    <bean id="master" class="com.example.spring.ioc.Master"/>

    <!--指定注解扫描包-->
    <context:component-scan base-package="com.example.spring"/>

    <!-- aop方式一：spring API -->
    <!-- 注测bean -->
    <bean id="userService" class="com.example.spring.aop.UserServiceImpl"/>
    <bean id="log" class="com.example.spring.aop.Log"/>
    <bean id="afterLog" class="com.example.spring.aop.AfterLog"/>

    <!-- aop配置 -->
    <aop:config>
        <!-- 切入点 expression:表达式匹配要执行的方法 execution要执行的位置(修饰词 返回值 类名 方法名 参数)-->
        <aop:pointcut id="pointcut" expression="execution(* com.example.spring.aop.UserServiceImpl.*(..))"/>
        <!-- 执行通知 advice-ref代表要执行的通知 pointcut代表切入点 -->
        <aop:advisor advice-ref="log" pointcut-ref="pointcut"/>
        <aop:advisor advice-ref="afterLog" pointcut-ref="pointcut"/>
    </aop:config>

    <!-- aop方式二：自定义类 -->
    <!-- 切面 -->
    <bean id="diy" class="com.example.spring.aop.DiyAspect"/>

    <aop:config>
        <aop:aspect ref="diy">
            <!-- 切点 -->
            <aop:pointcut id="diyPointCut" expression="execution(* com.example.spring.aop.UserServiceImpl.*(..))"/>
            <!-- 切面切入切点 -->
            <aop:before method="before" pointcut-ref="diyPointCut"/>
            <aop:after method="after" pointcut-ref="diyPointCut"/>
        </aop:aspect>
    </aop:config>

    <!-- aop方式三：注解 -->
    <!--<bean id="annotationAspect" class="com.example.spring.aop.AnnotationAspect"/>-->
    <!--<aop:aspectj-autoproxy/>-->
</beans>